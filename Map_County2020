# -*- coding=GBK -*-
import os
import cv2
import math
import time
import numpy as np
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from shapely.geometry.polygon import Polygon
from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar
t0 = time.time()

yyyy = 2019
map_ptype = 99  # 製作的地圖主類別 99:全部 0:nd 1:cdr 2:sdr
map_stype = 99  # 製作的地圖次類別 99:全部 其餘參考下方map_type_list 輸入為數字由0開始
output_yyyy = yyyy # 輸出西元
# output_yyyy = yyyy - 1911 # 輸出民國
input_folder = '*****'
output_folder = '*****'

# 不同種類地圖設定
# 自殺死亡人數、自殺粗死亡率、標準化自殺死亡率在Excel設定之欄位名稱為nd、cdr、sdr + (民國年)
# 如106自殺死亡人數為nd106；106自殺粗死亡率為cdr106
map_type_list = [['自殺死亡人數', '男性自殺死亡人數', '女性自殺死亡人數', '自殺死亡人數\n(以死亡地點分)'],
                 ['自殺粗死亡率', '男性自殺粗死亡率', '女性自殺粗死亡率',
                  '15-24歲自殺粗死亡率', '25-44歲自殺粗死亡率', '45-64歲自殺粗死亡率', '65歲以上自殺粗死亡率'],
                 ['標準化自殺死亡率', '男性標準化自殺死亡率', '女性標準化自殺死亡率',
                  '標準化自殺死亡率\n以固體或液體物質自殺及自為中毒', '標準化自殺死亡率\n由其他氣體及蒸氣自殺及自為中毒',
                  '標準化自殺死亡率\n吊死、勒死及窒息之自殺及自傷', '標準化自殺死亡率\n溺水(淹死)自殺及自傷',
                  '標準化自殺死亡率\n鎗砲及爆炸物自殺及自傷', '標準化自殺死亡率\n切穿工具自殺及自傷',
                  '標準化自殺死亡率\n由高處跳下自殺及自傷', '標準化自殺死亡率\n其他及未明示之方式自殺及自傷']]
column_list = [['nd', 'ndm', 'ndf', 'ndplace'],
               ['cdr', 'cdrm', 'cdrf', 'cdr15_24_', 'cdr25_44_', 'cdr45_64_', 'cdr65up_'],
               ['sdr', 'sdrm', 'sdrf',
                'sdr950_', 'sdr952_', 'sdr953_', 'sdr954_', 'sdr955_', 'sdr956_', 'sdr957_', 'sdr958_']]
group_list = [6, 6, 4]
color_list = ['Blues', 'Greens', 'OrRd']
labels_list = [['  0 - 100', '101 - 200', '201 - 300', '301 - 400', '401 - 500', ' > 500   '],
               [' 0.0 -  5.0', ' 5.0 - 10.0', '10.0 - 15.0', '15.0 - 20.0', '20.0 - 25.0', ' > 25.0  '],
               [' < 5.0   ', ' 5.5- 9.9', '10.0-14.9', ' >= 15.0  ']]
half_shape = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '(', ')', '[', ']', '-']

# 印出中文字及其它預設條件
plt.rcParams["legend.framealpha"] = 0
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams['font.sans-serif'] = ['DFKai-SB']  # 標楷體:DFKai-SB 正黑體:Microsoft JhengHei
plt.rcParams.update({'figure.max_open_warning': 0})

# 讀檔案
shape = gpd.read_file(input_folder + 'Setting\COUNTY_MOI_1081121.shp', encoding='utf8')
data = pd.read_csv(input_folder + 'County_Data.csv', encoding='big5')
mapdata = pd.merge(shape, data, on='COUNTYID')

if not os.path.isdir(output_folder + '地區分類\\0.全國'):
    os.mkdir(output_folder + '地區分類\\0.全國')

for ptype in range(len(map_type_list)):  # 地圖類型(primary and secondary type)
    for stype in range(len(map_type_list[ptype])):
        if ((ptype == map_ptype or map_ptype == 99) and (stype == map_stype or map_stype == 99)):  #測試或製作特定類別地圖使用
            # 各區分組標示顏色與地名
            # 在地圖加上一筆0的資料，確保分組時會以0為最低值
            insertRow1 = pd.DataFrame([['', Polygon([(120.45655266, 24.207186205), (120.45655266, 24.207186205),
                                                     (120.45655266, 24.207186205)]), 0]],
                                      columns=['COUNTYNAME', 'geometry', column_list[ptype][stype] + str(yyyy - 1911)])
            mapdata = pd.concat([mapdata, insertRow1], sort=False)

            # 在地圖加上一筆該組最高值的資料，確保分組時之組距(僅用於預設固定組距)
            if ptype == 2 and stype <= 2:
                insertRow2 = pd.DataFrame([['', Polygon([(120.45655266, 24.207186205), (120.45655266, 24.207186205),
                                                         (120.45655266, 24.207186205)]), group_list[ptype] - 1]],
                                          columns=['COUNTYNAME', 'geometry', column_list[ptype][stype] + str(yyyy - 1911)])
                mapdata = pd.concat([mapdata, insertRow2], sort=False)

            # 各區域分組並依數值上色
            # 顏色表 https://finthon.com/matplotlib-color-list/
            # cmap色表 https://matplotlib.org/3.1.0/tutorials/colors/colormaps.html
            ax = mapdata.plot(figsize=(15, 10), cmap=color_list[ptype], column=column_list[ptype][stype] + str(yyyy - 1911),
                              k = group_list[ptype], scheme = 'equal_interval', legend=True, edgecolor="black",
                              linewidth=0.5)  # 'PatchCollection' object
            mapdata.apply(lambda x: ax.annotate(s=x['COUNTYNAME'], xy=x.geometry.centroid.coords[0], ha='center',
                                                bbox=dict(boxstyle='round, pad=0', fc='yellow', ec='none')), axis=1)  # lemonchiffon

            # 限制地圖經緯度以移除過小的離島區域
            ax.set_xlim(119.9, 122.8)
            ax.set_ylim(21.8, 25.4)

            # 圖示標題、legend位置 \n可換行
            leg = ax.get_legend()
            leg.get_frame().set_linewidth(0)
            leg.set_title('')
            titler = '全國' + str(output_yyyy) + '年' + map_type_list[ptype][stype].replace(' ', '').replace('\n', '--')
            leg.set_bbox_to_anchor((1.4, 0.27))

            # 設定legend分組區間顯示方式
            groupl, groupu, labels1 = [], [], []
            if ptype == 0:
                # 圖示內文(原始資料.0f)
                dtmax = data[column_list[ptype][stype] + str(yyyy - 1911)].max()
                interval = dtmax / group_list[ptype]
                for g in range(group_list[ptype]):
                    if g > 0 and math.ceil(interval * g) == math.floor(interval * g):
                        grouplt = math.ceil(interval * g) + 1
                        groupl.append(grouplt)
                    else:
                        grouplt = math.ceil(interval * g)
                        groupl.append(grouplt)
                    groupu.append(math.floor(interval * (g + 1)))
                    labels1.append('%.f - %.f' % (grouplt, math.floor(interval * (g + 1))))
            elif ptype == 1 or ptype == 2 and stype >= 3:
                # 圖示內文(原始資料.1f)
                dtmax = data[column_list[ptype][stype] + str(yyyy - 1911)].max()
                interval = dtmax / group_list[ptype]
                for g in range(group_list[ptype]):
                    labels1.append('%.1f - %.1f' % (interval * g, interval * (g + 1)))
            else:
                # 圖示內文(分組資料)
                labels1 = labels_list[ptype]
            for text, label1 in zip(leg.get_texts(), labels1):
                text.set_text("{:<55}".format(label1))

            # 縣市標題、向北符號、比例尺與其他設定
            blank1, blank2 = 0, 0
            if map_type_list[ptype][stype].count('\n') == 0:
                for hs in half_shape:
                    blank1 += map_type_list[ptype][stype].count(hs)
                titlec = str(output_yyyy) + '年' + map_type_list[ptype][stype]
                ax.text(1.18, 0.27, "{0:{1}<30}".format(titlec, chr(12288)) + ' ' * blank1, fontsize=15, ha='center',
                        transform=ax.transAxes)
            else:
                title1s1 = map_type_list[ptype][stype].split('\n')[0]
                title1s2 = map_type_list[ptype][stype].split('\n')[1]
                for hs in half_shape:
                    blank1 += title1s1.count(hs)
                    blank2 += title1s2.count(hs)
                titlec = str(output_yyyy) + '年' + title1s1
                ax.text(1.18, 0.27, "{0:{1}<30}".format(titlec, chr(12288)) + ' ' * blank1 + '\n' +
                        "{0:{1}<30}".format(' ' + title1s2, chr(12288)) + ' ' * blank2, fontsize=15, ha='center',
                        transform=ax.transAxes)
            ax.text(0.85, 0.9, u'\u25B2 \nN ', ha='center', fontsize=20, family='Arial', transform=ax.transAxes)
            scalebar = AnchoredSizeBar(ax.transData, 1.796555103, '200 km', 'lower right',
                                       pad=0, frameon=False, label_top=True, size_vertical=0.001)
            ax.add_artist(scalebar)
            ax.set_axis_off()

            # 輸出
            output_file = output_folder + '地區分類\\0.全國\\0.' + titler + '.jpeg'
            plt.savefig(output_file)
            # plt.show()

            # 放大與聚合區域
            xlim3 = [119.1, 117.8, 119.6, 120.2]
            xlim4 = [121.1, 118.8, 120.6, 121.2]
            ylim3 = [23.1, 24, 25.7, 23.2]
            ylim4 = [24.1, 25, 26.7, 24.2]
            copyy1 = [388, 425, 400, 565]
            copyy2 = [588, 625, 600, 765]
            copyx1 = [375, 634, 580, 473]
            copyx2 = [575, 934, 780, 673]
            pastey1 = [650, 400, 150, 400]
            pastey2 = [850, 600, 350, 600]
            pastex1 = [200, 150, 200, 870]
            pastex2 = [400, 450, 400, 1070]
            for sr in range(4):
                ax2 = mapdata.plot(figsize=(15, 10), cmap=color_list[ptype],
                                   column=column_list[ptype][stype] + str(yyyy - 1911), k=group_list[ptype],
                                   scheme='equal_interval', edgecolor="black", linewidth=0.5)
                mapdata.apply(lambda x: ax2.annotate(s=x['COUNTYNAME'], xy=x.geometry.centroid.coords[0], ha='center',
                                                     bbox=dict(boxstyle='round, pad=0', fc='yellow', ec='none')), axis=1)
                ax2.set_xlim(xlim3[sr], xlim4[sr])
                ax2.set_ylim(ylim3[sr], ylim4[sr])
                plt.savefig(output_folder + 'temp.jpeg')
                src1 = cv2.imdecode(np.fromfile(output_file, dtype=np.uint8), -1)
                src2 = cv2.imdecode(np.fromfile(output_folder + 'temp.jpeg', dtype=np.uint8), -1)
                src2 = src2[copyy1[sr]:copyy2[sr], copyx1[sr]:copyx2[sr]]  # Y1:Y2, X1:X2
                src1[pastey1[sr]:pastey2[sr], pastex1[sr]:pastex2[sr]] = src2  # Y1:Y2, X1:X2
                cv2.rectangle(src1, (pastex1[sr], pastey1[sr]), (pastex2[sr], pastey2[sr]), (0, 0, 0), 1)  # (X1, Y1), (X2, Y2)
                cv2.imencode('.jpeg', src1)[1].tofile(output_file)

os.remove(output_folder + 'temp.jpeg')
print('花費時間：%.2f秒' % (time.time()-t0))
