# -*- coding=GBK -*-
import os
import cv2
import math
import time
import numpy as np
import pandas as pd
import geopandas as gpd
import matplotlib.cm as cm
import matplotlib.colors as col
import matplotlib.pyplot as plt
from shapely.geometry.polygon import Polygon
from mpl_toolkits.axes_grid1.anchored_artists import AnchoredSizeBar
plt.rcParams.update({'figure.max_open_warning': 0})
tStart = time.time()

yyyy = 2019
input_folder = '\\\\Tspc-nas\\中心資源\\統-自殺地圖\\自動地圖程式\\'
output_folder = '\\\\Tspc-nas\\中心資源\\統-自殺地圖\\自動地圖程式\\測試地圖\\'
# input_folder = 'D:\\Data\\geopandas\\'
# output_folder = 'C:\\Users\\user\\Desktop\\測試地圖\\'

# 不同種類地圖設定
T_NAME = ['自殺死亡人數', '自殺粗死亡率', '標準化自殺死亡率', '以全國為基準之SMR']
T_code = ['ndplace', 'cdr', 'sdr', 'smr_all_106_']
T_k = [6, 6, 4, 9]
T_color = ['Blues', 'Greens', 'OrRd', T_code[3]]
T_labels1 = [[' 0 - 15', '16 - 30', '31 - 45', '46 - 60', '61 - 75', ' > 75  '], [' 0.0 - 15.0', '15.0 - 30.0', '30.0 - 45.0', '45.0 - 60.0', '60.0 - 75.0', ' > 75.0    '], [' < 5.0   ', ' 5.5- 9.9', '10.0-14.9', ' >= 15.0 '], [' -       ', ' < 0.5   ', '0.5 -0.67', '0.67-0.9 ', '0.9 -1.1 ', '1.1 -1.5 ', '1.5 -2.0 ', '2.0 -5.0 ', ' >= 5.0  ']]
cm.register_cmap(cmap=col.LinearSegmentedColormap.from_list(T_code[3], ['#888888', '#0040ff', '#4080ff', '#80bfff', '#ffffff', '#ffbfbf', '#ff8080', '#ff4040', '#ff0000']))

# 印出中文字預設、讀檔案
# 自殺死亡人數、自殺粗死亡率、標準化自殺死亡率、SMR_以全國為基準在Excel設定之欄位設定為nd、cdr、sdr、smr + (民國年)
# 如2017自殺死亡人數為nd106；2017自殺粗死亡率為cdr106
plt.rcParams['font.sans-serif'] = ['DFKai-SB'] # 標楷體:DFKai-SB 正黑體:Microsoft JhengHei
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams["legend.framealpha"] = 0
dt = pd.read_csv(input_folder + 'Town_Data.csv', encoding='big5')
dt = dt[['TOWNID', T_code[0] + str(yyyy-1911), T_code[1] + str(yyyy-1911), T_code[2] + str(yyyy-1911), T_code[3] + str(yyyy-1911)]]
town = gpd.read_file(input_folder + 'Setting\TOWN_MOI_1080726.shp', encoding='utf8')
town = pd.merge(town, dt, on='TOWNID')
setting = pd.read_csv(input_folder + 'Setting\\county_setting.csv', encoding='big5')

# 個別縣市地圖設定
C_NAME = setting['C_NAME']
C_Polygon, C_legloc = [], []
for l in range(len(setting['C_NAME'])):
    C_Polygon.append((setting['C_Polygon1'][l], setting['C_Polygon2'][l]))
    C_legloc.append((setting['C_legloc1'][l], setting['C_legloc2'][l]))
C_titloc1 = setting['C_titloc1']
C_titloc2 = setting['C_titloc2']
C_north1 = setting['C_north1']
C_north2 = setting['C_north2']

# county_list = ['臺北市', '臺中市', '臺南市', '高雄市', '基隆市', '新竹市', '嘉義市', '新北市', '桃園市', '新竹縣', '宜蘭縣', '苗栗縣', '彰化縣', '南投縣', '雲林縣', '嘉義縣', '屏東縣', '澎湖縣', '花蓮縣', '臺東縣', '金門縣', '連江縣', ]

for j in range(len(T_NAME)): # 地圖類型
    if j == 3:
        for i in range(len(C_NAME)): # 地圖縣市
            # if C_NAME[i] == '新北市':
                mapdata = town[town.loc[:,'COUNTYNAME'] == C_NAME[i]]
                mapdatac = mapdata.shape[0]
                group = T_k[j]
                dtmax = mapdata[T_code[j] + str(yyyy - 1911)].max()

                # 修改過少鄉鎮之分組數
                if j == 0 or j == 1:
                    if C_NAME[i] == '新竹市' or C_NAME[i] == '嘉義市' or C_NAME[i] == '連江縣':
                        group = mapdata[T_code[j] + str(yyyy - 1911)].count()

                # 修改過少nd之分組數
                if j == 0:
                    if dtmax < group:
                        group = dtmax + 1

                # 各區分組標示顏色與地名
                insertRow1 = pd.DataFrame([['', Polygon([C_Polygon[i], C_Polygon[i], C_Polygon[i]]), 0]], columns=['TOWNNAME', 'geometry', T_code[j] + str(yyyy-1911)])
                mapdata = pd.concat([mapdata, insertRow1], sort=False)
                if j >= 2:
                    insertRow2 = pd.DataFrame([['', Polygon([C_Polygon[i], C_Polygon[i], C_Polygon[i]]), T_k[j] - 1]], columns=['TOWNNAME', 'geometry', T_code[j] + str(yyyy - 1911)])
                    mapdata = pd.concat([mapdata, insertRow2], sort=False)
                ax = mapdata.plot(figsize=(15, 10), cmap=T_color[j], column=T_code[j] + str(yyyy-1911), k = group, scheme = 'equal_interval', legend=True, edgecolor = "black", linewidth=0.5)
                mapdata.apply(lambda x: ax.annotate(s=x['TOWNNAME'], xy=x.geometry.centroid.coords[0], ha='center', bbox=dict(boxstyle='round, pad=0', fc='yellow', ec='none')), axis=1) # lemonchiffon
                # 顏色表 https://finthon.com/matplotlib-color-list/      cmap色表 https://matplotlib.org/3.1.0/tutorials/colors/colormaps.html

                # 移除過小的離島區域
                C_cut = ['基隆市', '宜蘭縣', '高雄市', '澎湖縣', '金門縣', '連江縣']
                xlim1 = [121.610, 121.2, 120.1, 119.38, 118.13, 119.88]
                xlim2 = [121.82, 122.1, 121.1, 119.72, 118.5, 120.05]
                ylim1 = [25.04, 24.2, 22.42, 23.45, 24.35, 26.12]
                ylim2 = [25.21, 25.04, 23.52, 23.78, 24.55, 26.3]
                for m, n in enumerate(C_cut):
                    if C_NAME[i] == n:
                        ax.set_xlim(xlim1[m], xlim2[m])
                        ax.set_ylim(ylim1[m], ylim2[m])

                # 圖示標題 # \n可換行
                # title1 = '     ' + str(yyyy) + '年' + T_NAME[j]
                # title1 = '   ' + str(yyyy) + '年' + '自殺死亡人數\n   (以死亡地點分)'
                # title1 = '     以' + C_NAME[i] + '為基準(65歲以上)\n     2017-2019年SMR'
                # title1 = '以' + C_NAME[i] + '為基準\n2017-2019年SMR'
                title1 = ' ' + C_NAME[i] + '以全國' + '為基準\n 2017-2019年SMR'
                title2 = '[' + str(mapdatac) + ']'
                leg = ax.get_legend()
                leg.get_frame().set_linewidth(0)
                leg.set_title(title1 + title2)
                titler = title1.replace('\n', '').replace(' ', '')
                if j != 3:
                    titler = C_NAME[i] + titler

                if j == 0:
                    # 圖示內文(原始資料.0f)
                    count0, count1, count2, count3, count4, count5, count6, count7, count8 = -1, 0, 0, 0, 0, 0, 0, 0, 0
                    interval = dtmax / group
                    labels1 = ['%.f - %.f' % (0, math.floor(interval * 1)), '%.f - %.f' % (math.ceil(interval * 1), math.floor(interval * 2)), '%.f - %.f' % (math.ceil(interval * 2), math.floor(interval * 3)), '%.f - %.f' % (math.ceil(interval * 3), math.floor(interval * 4)), '%.f - %.f' % (math.ceil(interval * 4), math.floor(interval * 5)), '%.f - %.f' % (math.ceil(interval * 5), math.floor(interval * 6))]
                    for l in mapdata[T_code[j] + str(yyyy - 1911)]:
                        for k in range(group):
                            if l >= math.ceil(interval * k) and l <= math.floor(interval * (k + 1)):
                                locals()["count%s" % k] += 1
                elif j == 1:
                    # 圖示內文(原始資料.1f)
                    count0, count1, count2, count3, count4, count5, count6, count7, count8 = -1, 0, 0, 0, 0, 0, 0, 0, 0
                    interval = dtmax / group
                    labels1 = ['%.1f - %.1f' % (0, interval), '%.1f - %.1f' % (interval, interval * 2), '%.1f - %.1f' % (interval * 2, interval * 3), '%.1f - %.1f' % (interval * 3, interval * 4), '%.1f - %.1f' % (interval * 4, interval * 5), '%.1f - %.1f' % (interval * 5, interval * 6)]
                    for l in mapdata[T_code[j] + str(yyyy - 1911)]:
                        for k in range(group):
                            if l >= interval * k and l < interval * (k + 1):
                                locals()["count%s" % k] += 1
                    kk = group - 1
                    locals()["count%s" % kk] += 1
                else:
                    # 圖示內文(分組資料)
                    count0, count1, count2, count3, count4, count5, count6, count7, count8 = 0, 0, 0, 0, 0, 0, 0, 0, 0
                    for k in range(T_k[j]):
                        locals()["count%s" % k] = mapdata[T_code[j] + str(yyyy - 1911)][mapdata[T_code[j] + str(yyyy - 1911)] == k].count()
                    kk = group-1
                    count0 -= 1
                    locals()["count%s" % kk] -= 1
                    labels1 = T_labels1[j]

                # 圖示內文(共用區域)
                labels2 = [count0, count1, count2, count3, count4, count5, count6, count7, count8]
                leg.set_bbox_to_anchor(C_legloc[i])
                for text, label1, label2 in zip(leg.get_texts(), labels1, labels2):
                    text.set_text(label1+' [' + str(label2) + ']')

                # 縣市標題、向北符號、比例尺與其他設定
                ax.text(C_north1[i], C_north2[i], u'\u25B2 \nN ', ha='center', fontsize=20, family='Arial', transform=ax.transAxes)
                if j != 3:
                    ax.text(C_titloc1[i], C_titloc2[i], C_NAME[i], fontsize=15, ha='center', transform=ax.transAxes)
                scalebar = AnchoredSizeBar(ax.transData, 0.0898277551716521, '10 km', 'lower right', pad=0, frameon=False, label_top=True, size_vertical=0.001)
                ax.add_artist(scalebar)
                ax.set_axis_off()

                # 輸出
                plt.savefig(output_folder + str(i + 1) + '.' + titler + '.jpeg')
                # plt.show()

                # 放大與聚合區域
                C_com = ['臺中市', '高雄市', '高雄市', '屏東縣', '澎湖縣', '金門縣', '連江縣', '連江縣']
                xlim3 = [120.440, 120.175, 120.13, 120.4, 119.38, 119.23, 120.38, 119.9]
                xlim4 = [120.80, 120.525, 120.485, 120.9, 119.72, 119.6, 120.55, 120.07]
                ylim3 = [24.06, 22.466, 22.4, 22.35, 23.15, 24.85, 26.22, 25.9]
                ylim4 = [24.2, 22.740, 22.99, 23.15, 23.48, 25.05, 26.4, 26.08]
                copyy1 = [370, 325, 225, 555, 293, 280, 150, 490]
                copyy2 = [570, 575, 575, 855, 813, 480, 350, 750]
                copyx1 = [815, 525, 603, 550, 430, 785, 750, 440]
                copyx2 = [1115, 810, 803, 750, 780, 1035, 1000, 840]
                pastey1 = [100, 630, 150, 580, 270, 200, 130, 360]
                pastey2 = [300, 880, 500, 880, 790, 400, 330, 620]
                pastex1 = [600, 700, 415, 550, 180, 200, 250, 250]
                pastex2 = [900, 985, 615, 750, 530, 450, 500, 650]
                for p, q in enumerate(C_com):
                    if C_NAME[i] == q:
                        ax2 = mapdata.plot(figsize=(15, 10), cmap=T_color[j], column=T_code[j] + str(yyyy - 1911), k=T_k[j], scheme='equal_interval', edgecolor="black", linewidth=0.5)
                        mapdata.apply(lambda x: ax2.annotate(s=x['TOWNNAME'], xy=x.geometry.centroid.coords[0], ha='center', bbox=dict(boxstyle='round, pad=0', fc='yellow', ec='none')), axis=1)
                        ax2.set_xlim(xlim3[p], xlim4[p])
                        ax2.set_ylim(ylim3[p], ylim4[p])
                        plt.savefig(output_folder + 'temp.jpeg')
                        src1 = cv2.imdecode(np.fromfile(output_folder + str(i + 1) + '.' + titler + '.jpeg', dtype=np.uint8), -1)
                        src2 = cv2.imdecode(np.fromfile(output_folder + 'temp.jpeg', dtype=np.uint8), -1)
                        src2 = src2[copyy1[p]:copyy2[p], copyx1[p]:copyx2[p]] # Y1:Y2, X1:X2
                        src1[pastey1[p]:pastey2[p], pastex1[p]:pastex2[p]] = src2 # Y1:Y2, X1:X2
                        cv2.rectangle(src1, (pastex1[p], pastey1[p]), (pastex2[p], pastey2[p]), (0, 0, 0), 1) # (X1, Y1), (X2, Y2)
                        cv2.imencode('.jpeg', src1)[1].tofile(output_folder + str(i + 1) + '.' + titler + '.jpeg')

os.remove(output_folder + 'temp.jpeg')
print('It cost ' + str(time.time()-tStart) + ' sec.')
